#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_VERTICES 100

// structure to represent an edge
struct edge {
  int u;
  int v;
  int weight;
};

// function to find the minimum edge in the graph
int findMinEdge(struct edge edges[], int n, bool mst[]) {
  int min = INT_MAX;
  int min_edge = -1;
  for (int i = 0; i < n; i++) {
    if (mst[i] == false && edges[i].weight < min) {
      min = edges[i].weight;
      min_edge = i;
    }
  }
  return min_edge;
}

// function to perform union of two sets
bool unionSet(int parent[], int u, int v) {
  int x = parent[u];
  int y = parent[v];
  while (parent[x] != x) {
    x = parent[x];
  }
  while (parent[y] != y) {
    y = parent[y];
  }
  if (x == y) {
    return false;
  }
  parent[x] = y;
  return true;
}

// function to find the minimum spanning tree of a graph
void MST(struct edge edges[], int n, int e) {
  bool mst[e];
  int parent[n];

  // initialize the parent and mst arrays
  for (int i = 0; i < e; i++) {
    mst[i] = false;
  }
  for (int i = 0; i < n; i++) {
    parent[i] = i;
  }

  // variable to store the number of edges in the minimum spanning tree
  int count = 0;
  while (count < n - 1) {
    int min_edge = findMinEdge(edges, e, mst);
    if (min_edge != -1) {
      mst[min_edge] = true;
      if (unionSet(parent, edges[min_edge].u, edges[min_edge].v)) {
        printf("%d -> %d : %d\n", edges[min_edge].u, edges[min_edge].v, edges[min_edge].weight);
        count++;
      }
    } else {
      break;
    }
  }
}

int main() {
  int n = 4; // number of vertices
  int e = 5; // number of edges

  // array of edges
  struct edge edges[] = {{0, 1, 10}, {0, 2, 6}, {0, 3, 5}, {1, 3, 15}, {2, 3, 4}};

  // find the minimum spanning tree
  MST(edges, n, e);

  return 0;
}
