#include <stdio.h>

#define V 5

int graph[V][V] = {
    {0, 1, 0, 1, 0},
    {1, 0, 1, 1, 1},
    {0, 1, 0, 0, 1},
    {1, 1, 0, 0, 1},
    {0, 1, 1, 1, 0}
};

int path[V];
bool visited[V];

bool is_valid_move(int v, int pos) {
    if (graph[path[pos - 1]][v] == 0) {
        return false;
    }
    for (int i = 0; i < pos; i++) {
        if (path[i] == v) {
            return false;
        }
    }
    return true;
}

bool hamiltonian_cycle_util(int pos) {
    if (pos == V) {
        if (graph[path[pos - 1]][path[0]] == 1) {
            return true;
        } else {
            return false;
        }
    }
    for (int v = 1; v < V; v++) {
        if (is_valid_move(v, pos)) {
            path[pos] = v;
            if (hamiltonian_cycle_util(pos + 1)) {
                return true;
            }
            path[pos] = -1;
        }
    }
    return false;
}

bool hamiltonian_cycle() {
    for (int i = 0; i < V; i++) {
        path[i] = -1;
    }
    path[0] = 0;
    if (!hamiltonian_cycle_util(1)) {
        printf("Solution does not exist\n");
        return false;
    }
    printf("Hamiltonian cycle exists: ");
    for (int i = 0; i < V; i++) {
        printf("%d ", path[i]);
    }
    printf("%d", path[0]);
    return true;
}

int main() {
    hamiltonian_cycle();
    return 0;
}
